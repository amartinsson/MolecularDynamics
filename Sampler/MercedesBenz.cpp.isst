#include <vector>
#include <omp.h>
#include <stdio.h>
#include <math.h>
// #include <mpi.h>

#include "BAOAB.hpp"
#include "Molecules.hpp"
#include "MercedesBenz.hpp"
#include "Array.hpp"
#include "SystemTrajectory.hpp"

#include "InfiniteSwitchSimulatedTempering.hpp"
#include "PressureInfiniteSwitchSimulation.hpp"

#include "SystemTrajectory.hpp"
#include "SystemTemperature.hpp"
#include "SystemEnergy.hpp"
#include "SystemPotentialEnergy.hpp"
#include "SystemConfigurationalTemperature.hpp"
#include "ISObservable.hpp"
#include "DISObservable.hpp"

using namespace::std;

int main(int argc, char* argv[])
{
    // Initialize the MPI environment
    // MPI_Init(NULL, NULL);

    // Get the number of processes
    int world_size = 0;
    // MPI_Comm_size(MPI_COMM_WORLD, &world_size);

    // Get the rank of the process
    int world_rank = 0;
    // MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);
    printf("Hello from process %d\n", world_rank);

    // parameters
    int SEED = 1234;
    unsigned dimension = 2;
    unsigned number_of_particles = 20*20;
    double temp = 0.1;

    double momIntertia = 0.01126;

    double sx = 30.0;
    double sy = 30.0;
    double sz = -1.0;

    double time_step = 0.001;
    double gamma = 1.0;
    double gamma_rot = 1.0;

    double target_pressure = 0.15;
    double pressure_min = 0.1;

    unsigned write_frequency = 100;
    double box_mass = 100.0;
    double npt_langevin_friction = 1.42;

    unsigned TIME = 1e2;
    bool rebuild_bool = false;

    unsigned npt_scheme_nr = 1;
    unsigned control_number = 0;

    double burn_in_fraction = 0.1;
    bool with_npt = false;

    unsigned nint = 10;
    double temp_max = 0.2;

  // cehck inouts
  for(int i=1;i<argc;i=i+2)
    {
        // Convert input to string
        std::string arg = argv[i];
        std::string arg2 = argv[i+1];
        if(arg == "--h")
        {
            double arg_in = std::stod(arg2);
            time_step = arg_in;
            printf("timestep set to: %.4f\n", time_step);
        }
        else if(arg == "--pressure")
        {
            double arg_in = std::stod(arg2);
            target_pressure = arg_in;
            printf("pressure set to: %1.2f\n", target_pressure);
        }
        else if(arg == "--press_min")
        {
            double arg_in = std::stod(arg2);
            pressure_min = arg_in;
            printf("min tempering pressure set to: %1.2f\n", pressure_min);
        }
        else if(arg == "--temperature")
        {
            double arg_in = std::stod(arg2);
            temp = arg_in;
            printf("temperature set to: %1.2f\n", temp);
        }
        else if(arg == "--time")
        {
            unsigned arg_in = std::stod(arg2);
            TIME  = arg_in;
            printf("Total Simulation Time set to: %.0d\n", TIME);
        }
        else if(arg == "--nparticles")
        {
            unsigned arg_in = std::stod(arg2);
            number_of_particles  = arg_in;
            printf("number of particles set to: %.0d\n", number_of_particles);
        }
        else if(arg == "--S_x")
        {
            double arg_in = std::stod(arg2);
            sx = arg_in;
            printf("S_x set to: %1.2f\n", sx);
        }
        else if(arg == "--S_y")
        {
            double arg_in = std::stod(arg2);
            sy = arg_in;
            printf("S_y set to: %1.2f\n", sy);
        }
        else if(arg == "--S_z")
        {
            double arg_in = std::stod(arg2);
            sz = arg_in;
            printf("S_z set to: %1.2f\n", sz);
        }
        else if(arg == "--rbuild")
        {
            bool arg_in = std::stod(arg2);
            rebuild_bool  = arg_in;
            printf("Rebuilding.. %.0d\n", rebuild_bool);
        }
        else if(arg == "--bmass")
        {
            double arg_in = std::stod(arg2);
            box_mass = arg_in;
            printf("Thermal mass of box set to: %1.2f\n", box_mass);
        }
        else if(arg == "--blan")
        {
            double arg_in = std::stod(arg2);
            npt_langevin_friction = arg_in;
            printf("NPT friction of box set to: %1.2f\n",
                   npt_langevin_friction);
        }
        else if(arg == "--plan")
        {
            double arg_in = std::stod(arg2);
            gamma = arg_in;
            printf("Particle friction of simulation set to: %1.2f\n",
                   gamma);
        }
        else if(arg == "--rlan")
        {
            double arg_in = std::stod(arg2);
            gamma_rot = arg_in;
            printf("Particle rotation friction of simulation set to: %1.2f\n",
                   gamma_rot);
        }
        else if(arg == "--burn")
        {
            double arg_in = std::stod(arg2);
            burn_in_fraction = arg_in;
            printf("burn in fraction set to: %1.2f\n", burn_in_fraction);
        }
        else if(arg == "--wfreq")
        {
            unsigned arg_in = std::stod(arg2);
            write_frequency = arg_in;
            printf("write frequency set to: %.0d\n", write_frequency);
        }
        else if(arg == "--nptnr")
        {
            unsigned arg_in = std::stod(arg2);
            npt_scheme_nr = arg_in;
            printf("NPT integration scheme set to: %.0d\n", npt_scheme_nr);
        }
        else if(arg == "--cntrl")
        {
            unsigned arg_in = std::stod(arg2);
            control_number = arg_in;
            printf("Control number set to: %.0d\n", control_number);
        }
        else if(arg == "--seed")
        {
            int arg_in = std::stod(arg2);
            SEED = arg_in;
            printf("Seed set to: %.0d\n", SEED);
        }
        else if(arg == "--npt")
        {
            int arg_in = std::stod(arg2);
            with_npt = true;
            printf("Setting npt to: %d\n", with_npt);
        }
        else if(arg == "--ntemp")
        {
            unsigned arg_in = std::stod(arg2);
            nint  = arg_in;
            printf("Total number of temperatures set to: %.0d\n", nint);
        }
        else if(arg == "--temp_max")
        {
            double arg_in = std::stod(arg2);
            temp_max = arg_in;
            printf("max temperature set to: %1.2f\n", temp_max);
        }
    }

    // initialise box size
    Matrix BoxS(2,2);
    if(sz > 0.0)
    {
        BoxS.resize(3,3);
        BoxS(2,2) = sz;
    }

    BoxS(0,0) = sx;
    BoxS(1,1) = sy;

    // add contorl number to seed differently
    SEED += control_number + (control_number + 1) * world_rank;

    // calculate the number of steps
    unsigned number_of_steps = TIME / time_step;

    // calculate the number of burn in steps
    unsigned burn_in_steps = floor(burn_in_fraction * number_of_steps);

    // make particle standard values
    Vector q_0(dimension);
    Vector p_0(dimension);
    Matrix Q_0(dimension, dimension);
    Matrix pi_0(1, 1);
    Matrix m_0(dimension, dimension);
    Matrix I_0(dimension, dimension);

    // set mass and moment of inertia
    m_0.diag(1.0);
    I_0.diag(momIntertia);

    // make crystal molecule with number_of_particles
    unsigned narms = 3;
    Molecule* cluster = new AniCollection(q_0, p_0, Q_0, pi_0, m_0, I_0, narms,
                                          temp, number_of_particles, dimension);

    // Make a Mercedes Benz Force solver
    // double epsilon = 0.1; // used in some papers
    double epsilon = 0.4; // used in the best paper
    double sigma = 0.7;
    double epsilon_hb = -1.0;
    double sigma_hb = 0.085;
    double r_hb = 1.0;

    System* mercedes_benz = new MercedesBenz(epsilon, sigma, epsilon_hb,
                                             sigma_hb, r_hb);

    // make integrator
    BAOAB* integrator = new BAOAB(1.0/temp, gamma, gamma_rot, time_step,
                                  mercedes_benz, SEED);

    // calculate the cut off
    // double cut_off = 4.0 * pow(2.0, 1.0/6.0) * sigma;
    double cut_off = 4.0 * r_hb;

    // set the boundaries for the rmin rmax calculations
    double rmin = 0.0; //0.95 * sigma;
    double rmax = cut_off;
    int nrdist = 200;

    printf("getting here\n");
    if(with_npt)
        integrator->integrate_with_npt_grid(BoxS, cut_off, cluster,
                                            box_mass, target_pressure,
                                            npt_langevin_friction,
                                            write_frequency, burn_in_steps);
    else
        integrator->integrate_with_grid(BoxS, cut_off, cluster,
                                        write_frequency, burn_in_steps);

    if(rebuild_bool)
    {
        char position[50];
        char volume[50];
        char momentum[50];

        sprintf(position, "Observables/Initial/positions_%i.csv", world_rank);
        sprintf(volume, "Observables/Initial/volume_%i.csv", world_rank);
        sprintf(momentum, "Observables/Initial/momentum_%i.csv", world_rank);
        integrator->npt_set_initial(cluster, position, momentum, volume);
    }

    if(with_npt)
    {
        // integrator->npt_obj().set_to_calculate_order_param(cluster, 1.0);
        integrator->npt_obj().set_to_calculate_sphere_order_param(cluster, 6, sigma);
                                                                  // pow(2.0, 1.0/6.0) * sigma);
        integrator->npt_obj().set_to_calculate_radial_dist(rmin,rmax,nrdist);
    }
    else
    {
        // integrator->grid_obj().set_to_calculate_order_param(cluster, 1.0);
                                            // pow(2.0, 1.0/6.0) * sigma);
        integrator->grid_obj().set_to_calculate_sphere_order_param(cluster, 3,
                                                                   sigma);
                                                    // pow(2.0, 1.0/6.0) * sigma);
        integrator->grid_obj().set_to_calculate_radial_dist(rmin,rmax,nrdist);
    }


    // make system trajectory object
    SystemTrajectory traj = SystemTrajectory(cluster);

    if(with_npt)
        traj.set_simbox(integrator->npt_obj().S);

    printf("Print every %d steps after %d\n", write_frequency, burn_in_steps);

    // ----------------- Infinite Switch Simulation --------------------------//
    // InfiniteSwitch* giss = new InfiniteSwitchSimulatedTempering(cluster, temp,
    //                             temp_max, nint, time_step, 1.0);

    // InfiniteSwitch* giss = new PressureInfiniteSwitchSimulation(cluster,
    //         &integrator->npt_obj(), pressure_min, target_pressure, nint,
    //             time_step, 1.0);
    //
    // set integrator to integrate with generalised infinite switch method
    // integrator->integrate_with_infinite_switch(giss);

    for(unsigned i=0; i<number_of_steps; i++)
    {
        // integrate forward
        integrator->integrate(cluster);

        // if(i == 2 * burn_in_steps) {
        //     printf("Adding ISST on step %i\n", i);
        //     // set integrator to integrate with generalised infinite switch method
        //     integrator->integrate_with_infinite_switch(giss);
        // }

        // double F1 = 0.0;
        // double F2 = 0.0;
        // double TAU = 0.0;
        // for(const auto& particle : cluster->Particles)
        // {
        //     F1 += particle.second->f(0);
        //     F2 += particle.second->f(1);
        //     TAU += particle.second->tau(0,0);
        // }
        //
        // printf("Total Force = (%2.5f, %2.5f), Tau = %f\n", F1, F2, TAU);


        // update pressure temperature// update pressure temperature
        if(with_npt)
            integrator->npt_obj().update_pressure_temperature();
        else
            integrator->grid_obj().update_temperature();

        if(integrator->cell_blow_up())
        {
            printf("step %d\n", i);
            printf("ERROR: Breaking Process %d with mu = %1.3f, nu = %1.3f\n",
                    world_rank, box_mass, npt_langevin_friction);
            break;
        }

        if(i % write_frequency == 0 && i != 0 && i > burn_in_steps)
        {
            printf("V = %f\n", cluster->potential());

            double time_stamp = TIME * double(i) / double(number_of_steps);
            // exit(-1);
            // update the pressure and temperature
            if(with_npt)
            {
                // print positions
                Matrix simbox = integrator->npt_obj().S;
                traj.print_positions("frame", i / write_frequency);
                traj.print_simbox("simbox", i / write_frequency);

                // print temperature
                integrator->npt_obj().Temperature_pt->print("temperature",
                                                            time_stamp,
                                                            control_number + world_rank);
                // print pressure
                integrator->npt_obj().Pressure_pt->print("pressure",
                                                         time_stamp,
                                                         control_number + world_rank);
                // print volume
                integrator->npt_obj().Volume_pt->print("volume", time_stamp,
                                                       control_number + world_rank);
                // print order
                integrator->npt_obj().SphereOrder_pt->print("sphere", time_stamp,
                                                       control_number + world_rank);

               // print order
               // integrator->npt_obj().Order_pt->print("order", time_stamp,
               //                                        control_number + world_rank);
                                                            // i / write_frequency);

                // double temp = integrator->npt_obj().Temperature_pt->get_average();
                // double itemp = integrator->npt_obj().Temperature_pt->get_instant();
                // printf("Temperature \t %1.5f %1.3f\n", temp,itemp);
                //
                // // print pressure
                // double instant_pressure = integrator->npt_obj().Pressure_pt->get_instant();
                // double pressure = integrator->npt_obj().Pressure_pt->get_average();
                // printf("Pressure %.0d\t %1.5f %1.3f\n", i, pressure, instant_pressure);
                //
                // //print volume
                // double vol = integrator->npt_obj().Volume_pt->get_average();
                // double ivol = integrator->npt_obj().Volume_pt->get_average();
                // printf("Density \t     %1.5f\n", number_of_particles / vol * pow(sigma, 3.0));
                //
                // double iorder = integrator->npt_obj().SphereOrder_pt->get_instant();
                // double order = integrator->npt_obj().SphereOrder_pt->get_average();
                // printf("Order \t %1.5f %1.5f\n", order, iorder);
            }
            else
            {
                // print positions
                Matrix simbox = integrator->grid_obj().S;
                // traj.print_positions("frame", i / write_frequency);
                // traj.print_simbox("simbox", i / write_frequency);

                // print temperature
                integrator->grid_obj().Temperature_pt->print("temperature",
                                                            time_stamp,// 0);
                                                            control_number + world_rank);
                // print volume
                integrator->grid_obj().Volume_pt->print("volume", time_stamp,
                                                       control_number + world_rank);
                // print order
                integrator->grid_obj().SphereOrder_pt->print("order", time_stamp,
                                                control_number + world_rank);
                // // break
                // double temp = integrator->grid_obj().Temperature_pt->get_average();
                // double itemp = integrator->grid_obj().Temperature_pt->get_instant();
                // printf("Temperature \t %1.5f %1.3f\n", temp,itemp);
                //
                // //print volume
                // double vol = integrator->grid_obj().Volume_pt->get_average();
                // double ivol = integrator->grid_obj().Volume_pt->get_average();
                // // print_volume(volume, simbox, time_stamp, control_number + world_rank);
                // printf("Density \t     %1.5f\n", number_of_particles / vol * pow(sigma, 3.0));
                //
                // double iorder = integrator->grid_obj().SphereOrder_pt->get_instant();
                // double order = integrator->grid_obj().SphereOrder_pt->get_average();
                // printf("Order \t %1.5f %1.5f\n", order, iorder);
            }
        }

        // if(i % int(0.2 * number_of_steps) == 0 | i == number_of_steps)
        // {
        //     if(with_npt)
        //     {
        //         Matrix simbox = integrator->npt_obj().S;
        //         print_final(cluster, simbox, world_rank);
        //     }
        //     else
        //     {
        //         Matrix simbox = integrator->grid_obj().S;
        //         print_final(cluster, simbox, world_rank);
        //     }
        //
        //
        // }
    }

    // print the distribution function
    if(with_npt)
        integrator->npt_obj().Radial_pt->print("rdist", 0.0,
                                           control_number + world_rank);
    else
        integrator->grid_obj().Radial_pt->print("rdist", 0.0,
                                       control_number + world_rank);
    // have mpi process wait if it blew up
    // MPI_Barrier(MPI_COMM_WORLD);

    // Finalize the MPI environment.
    // MPI_Finalize();

} // end main
